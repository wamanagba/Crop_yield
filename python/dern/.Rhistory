map <- ggplot(NHSBoards_tidy, aes(x = long, y = lat, group = group, fill = score)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_void() +
theme(legend.position = "none")+
labs(title = model) +
theme(plot.title = element_text(margin = margin(t = 40, b = -40)))
map=map +geom_text(data = HBLabel, mapping = aes(x = label_long, y = label_lat, label = score, group = NA)
, cex = 4, col = "white")
return(map)
}
RidgeCV=score('RidgeCV')
Lasso=score('Lasso')
RandomForest=score('RandomForest')
DecisionTree=score('DecisionTree')
map=plot_grid(RidgeCV, Lasso, RandomForest,DecisionTree,
label_size = 11)
x11();map
x11();map
source("C:/Users/Yacou/Desktop/Yacouba_New/climte/code/R/score.R")
source("C:/Users/Yacou/Desktop/Yacouba_New/climte/code/R/score.R")
library(cowplot)
library(tidyverse)
library(broom)
library(ggpubr)
library(rgdal)
NHSBoards <- readOGR("C:\\Users\\Yacou\\Desktop\\Yacouba_New\\climte\\Data\\BFA_adm\\BFA_adm2.shp",use_iconv = TRUE,encoding = "UTF-8")
basepath= 'C:\\Users\\Yacou\\Desktop\\Yacouba_New\\climte\\code\\New folder\\New folder\\'
#binary_precip$model
binary_precip= read.table(paste0(basepath, "aaa.csv"), sep=",", dec=".", header=T)
binary_precip=binary_precip[order(binary_precip$province), ]
d1=binary_precip[binary_precip$model=='RidgeCV',c('score_test','province')]
#model='RidgeCV'
score=function(model){
d1=binary_precip[binary_precip$model==model,c('score_test')]
d1=t(d1)
d1=round(d1,digits = 2)
d1=replace(d1, d1<=0, 0)
NHSBoards_tidy <- tidy(NHSBoards)
NHSBoards$id <- row.names(NHSBoards)
NHSBoards_tidy <- left_join(NHSBoards_tidy, NHSBoards@data)
dr=as.data.frame(NHSBoards@data)
hospitalsSco <- data.frame(NAME_2  = sort(dr$NAME_2),
score = as.numeric(d1))
NHSBoards_tidy <- left_join(NHSBoards_tidy, hospitalsSco)
HBLabel <- NHSBoards_tidy %>%
group_by(NAME_2) %>%
summarise(label_long = mean(range(long)), label_lat = mean(range(lat)), score = mean(score))
map <- ggplot(NHSBoards_tidy, aes(x = long, y = lat, group = group, fill = score)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_void() +
theme(legend.position = "none")+
labs(title = model) +
theme(plot.title = element_text(margin = margin(t = 40, b = -40)))
map=map +geom_text(data = HBLabel, mapping = aes(x = label_long, y = label_lat, label = score, group = NA)
, cex = 4, col = "white")
return(map)
}
RidgeCV=score('RidgeCV')
Lasso=score('Lasso')
RandomForest=score('RandomForest')
DecisionTree=score('DecisionTree')
map=plot_grid(RidgeCV, Lasso, RandomForest,DecisionTree,
label_size = 11)
x11();map
x11();map
library(cowplot)
library(tidyverse)
library(broom)
library(ggpubr)
library(rgdal)
NHSBoards <- readOGR("C:\\Users\\Yacou\\Desktop\\Yacouba_New\\climte\\Data\\BFA_adm\\BFA_adm2.shp",use_iconv = TRUE,encoding = "UTF-8")
NHSBoards <- readOGR("D:\\Yacouba_New\\climte\\Data\\BFA_adm\\BFA_adm2.shp",use_iconv = TRUE,encoding = "UTF-8")
basepath= 'C:\\Users\\Yacou\\Desktop\\Yacouba_New\\climte\\code\\New folder\\New folder\\'
#binary_precip$model
binary_precip= read.table(paste0(basepath, "aaa.csv"), sep=",", dec=".", header=T)
binary_precip=binary_precip[order(binary_precip$province), ]
d1=binary_precip[binary_precip$model=='RidgeCV',c('score_test','province')]
#model='RidgeCV'
score=function(model){
d1=binary_precip[binary_precip$model==model,c('score_test')]
d1=t(d1)
d1=round(d1,digits = 2)
d1=replace(d1, d1<=0, 0)
NHSBoards_tidy <- tidy(NHSBoards)
NHSBoards$id <- row.names(NHSBoards)
NHSBoards_tidy <- left_join(NHSBoards_tidy, NHSBoards@data)
dr=as.data.frame(NHSBoards@data)
hospitalsSco <- data.frame(NAME_2  = sort(dr$NAME_2),
score = as.numeric(d1))
NHSBoards_tidy <- left_join(NHSBoards_tidy, hospitalsSco)
HBLabel <- NHSBoards_tidy %>%
group_by(NAME_2) %>%
summarise(label_long = mean(range(long)), label_lat = mean(range(lat)), score = mean(score))
map <- ggplot(NHSBoards_tidy, aes(x = long, y = lat, group = group, fill = score)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_void() +
theme(legend.position = "none")+
labs(title = model) +
theme(plot.title = element_text(margin = margin(t = 40, b = -40)))
map=map +geom_text(data = HBLabel, mapping = aes(x = label_long, y = label_lat, label = score, group = NA)
, cex = 4, col = "white")
return(map)
}
RidgeCV=score('RidgeCV')
Lasso=score('Lasso')
RandomForest=score('RandomForest')
DecisionTree=score('DecisionTree')
map=plot_grid(RidgeCV, Lasso, RandomForest,DecisionTree,
label_size = 11)
x11();map
source("C:/Users/Yacou/Desktop/Yacouba_New/climte/code/R/score.R")
x11();map
rm(list=ls())
############ Load necessary libraries
suppressPackageStartupMessages({
library(sp)
library(rgdal)
#library(geosphere)
library(ncdf4)
library(lubridate)
library(stringr)
#library(tidyr)
#library(ggplot2)
#library(caTools)
#library(RMAWGEN)
#library(signal)
#library(forecast)
#library(futureheatwaves)
#library(RmarineHeatWaves)
#library(plyr)
#library(dplyr)
#library(vegan)
#require(IRanges)
#library(weathermetrics)
#library(FactoMineR)
#library(missMDA)
#library(TTR)
#library(pspline)
#library(sfsmisc)
library(raster)
#library(rasterVis)
#library(verification)
#library(SpecsVerification)
#library(s2dverification)
#library(easyVerification)
#library(PRROC)
#library(SpatialVx)
#library(extRemes)
#library(gridExtra)
#library("readxl")
})
############ Load necessary libraries
suppressPackageStartupMessages({
library(sp)
library(rgdal)
#library(geosphere)
library(ncdf4)
library(lubridate)
library(stringr)
#library(tidyr)
#library(ggplot2)
#library(caTools)
#library(RMAWGEN)
#library(signal)
#library(forecast)
#library(futureheatwaves)
#library(RmarineHeatWaves)
#library(plyr)
#library(dplyr)
#library(vegan)
#require(IRanges)
#library(weathermetrics)
#library(FactoMineR)
#library(missMDA)
#library(TTR)
#library(pspline)
#library(sfsmisc)
library(raster)
#library(rasterVis)
#library(verification)
#library(SpecsVerification)
#library(s2dverification)
#library(easyVerification)
#library(PRROC)
#library(SpatialVx)
#library(extRemes)
#library(gridExtra)
#library("readxl")
})
set_Polypath(FALSE)
#basepath="/research/geog/data1/kg312/RCCC/Sierra_Leone_floods/"
#basepath="C:/Users/Yacou/Desktop/Yacouba_New/climte/Data/Temperature/CHIRTSdaily_v1.0_africa_netcdf_p05/Tmax/"
basepath="C:/Users/Yacou/Desktop/Yacouba_New/climte/Data/Temperature/BEST_Temperature_Berkeley_Earth/nn/"
shp=readOGR("C:\\Users\\Yacou\\Desktop\\Yacouba_New\\climte\\Data\\BFA_adm\\BFA_adm2.shp")
LZ_names=paste0("LZ",sprintf("%02d", 1:length(shp$NAME_2)))
LZ_names=paste0("LZ",sprintf("%02d", 1:length(shp$NAME_2)))
#### Read Precip data
S= stack(paste0(basepath,"Tmax.nc") )#S= crop(stack(paste0(basepath,"Tamsat_complet_Precipitation_Burkina.nc"), extent(shp)) )
#x=crop(S,extent(shp))
A=as.data.frame(t(extract(S,shp,mean,na.rm=T)))
Tmax=A
colnames(A)= as.vector(LZ_names)
# Timetable
Time=as.Date( str_replace_all (str_replace_all(names(S), "X",""), "[.]","/"))
wakat=as.data.frame(matrix(nrow=length(Time),ncol=5)); colnames(wakat)=c("date","year","month","day","julian")
wakat$date=Time
wakat$year=year(wakat$date)
wakat$month=month(wakat$date)
wakat$day=day(wakat$date)
wakat$julian=yday(wakat$date)
######### Monthly  totals
A=subset(cbind(wakat,A), year %in% c(2000:2017))
#Tm#=A
Tmax=A
save(Tmax,file="C:/Users/Yacou/Desktop/Yacouba_New/climte/Data/Temperature/BEST_Temperature_Berkeley_Earth/nn/")
save(Tmax,file="C:/Users/Yacou/Desktop/Yacouba_New/climte/Data/Temperature/BEST_Temperature_Berkeley_Earth/nn/tmin.rdata")
write.csv(t2, here::here("C:/Users/Yacou/Desktop/Yacouba_New/climte/Data/Temperature/BEST_Temperature_Berkeley_Earth/nn/","Tmax.csv"),row.names = FALSE )
colnames(Tmax)[6:50]=shp$NAME_2
A=Tmax
B1=subset(A,month%in% 7:9)
TXx=aggregate(B1[-c(1:5)],list(B1$year),max)
write.csv(TXx, here::here("C:/Users/Yacou/Desktop/Yacouba_New/climte/Data/Temperature/BEST_Temperature_Berkeley_Earth/nn/indices/","TXx.csv"),row.names = FALSE )
# TXn: monthly minimum value of daily maximum temperature:
TXn=aggregate(B1[-c(1:5)],list(B1$year,B1$month),min)
TXn=aggregate(TXn[-c(1:2)],list(TXn$Group.1),mean)
write.csv(TXn, here::here("C:/Users/Yacou/Desktop/Yacouba_New/climte/Data/Temperature/BEST_Temperature_Berkeley_Earth/nn/indices/","TXn.csv"),row.names = FALSE )
rm(list=ls())
############ Load necessary libraries
suppressPackageStartupMessages({
library(sp)
library(rgdal)
#library(geosphere)
library(ncdf4)
library(lubridate)
library(stringr)
library(raster)
})
set_Polypath(FALSE)
#basepath="/research/geog/data1/kg312/RCCC/Sierra_Leone_floods/"
#basepath="C:/Users/Yacou/Desktop/Yacouba_New/climte/Data/Temperature/CHIRTSdaily_v1.0_africa_netcdf_p05/Tmin/"
basepath="C:/Users/Yacou/Desktop/Yacouba_New/climte/Data/Temperature/BEST_Temperature_Berkeley_Earth/nn/"
shp=readOGR("C:\\Users\\Yacou\\Desktop\\Yacouba_New\\climte\\Data\\BFA_adm\\BFA_adm2.shp")
LZ_names=paste0("LZ",sprintf("%02d", 1:length(shp$NAME_2)))
#### Read Precip data
S= stack(paste0(basepath,"Tmin.nc") )#S= crop(stack(paste0(basepath,"Tamsat_complet_Precipitation_Burkina.nc"), extent(shp)) )
#x=crop(S,extent(shp))
A=as.data.frame(t(extract(S,shp,mean,na.rm=T)))
colnames(A)= as.vector(LZ_names)
dataa=A
# Timetable
Time=as.Date( str_replace_all (str_replace_all(names(S), "X",""), "[.]","/"))
wakat=as.data.frame(matrix(nrow=length(Time),ncol=5)); colnames(wakat)=c("date","year","month","day","julian")
wakat$date=Time
wakat$year=year(wakat$date)
wakat$month=month(wakat$date)
wakat$day=day(wakat$date)
wakat$julian=yday(wakat$date)
######### Monthly  totals
A=subset(cbind(wakat,A), year %in% c(2000:2017))
Tminn#=A
save(Tminn,file="C:/Users/Yacou/Desktop/Yacouba_New/climte/Data/Temperature/BEST_Temperature_Berkeley_Earth/nn/Tminn.Rdata")
#A=Tminn
colnames(A)[6:50]=shp$NAME_2
B1=subset(A,month%in% 7:9)
TNx=aggregate(B1[-c(1:5)],list(B1$year,B1$month),max)
TNx=aggregate(TNx[-c(1:2)],list(TNx$Group.1),mean)
write.csv(TNx, here::here("C:/Users/Yacou/Desktop/Yacouba_New/climte/Data/Temperature/BEST_Temperature_Berkeley_Earth/nn/indices/","TNx.csv"),row.names = FALSE )
TNn=aggregate(B1[-c(1:5)],list(B1$year,B1$month),min)
TNn=aggregate(TNn[-c(1:2)],list(TNn$Group.1),mean)
write.csv(TNn, here::here("C:/Users/Yacou/Desktop/Yacouba_New/climte/Data/Temperature/BEST_Temperature_Berkeley_Earth/nn/indices/","TNn.csv"),row.names = FALSE )
dev.off()
library(cowplot)
library(tidyverse)
library(broom)
library(ggpubr)
library(rgdal)
NHSBoards <- readOGR("D:\\Yacouba_New\\climte\\Data\\BFA_adm\\BFA_adm2.shp",use_iconv = TRUE,encoding = "UTF-8")
basepath= 'C:\\Users\\Yacou\\Desktop\\Yacouba_New\\climte\\code\\Crop_yield\\python\\dern\\'
#binary_precip$model
binary_precip= read.table(paste0(basepath, "mais_01.csv"), sep=",", dec=".", header=T)
binary_precip=binary_precip[order(binary_precip$province), ]
d1=binary_precip[binary_precip$model=='RidgeCV',c('score_test','province')]
#model='RidgeCV'
score=function(model){
d1=binary_precip[binary_precip$model==model,c('score_test')]
d1=t(d1)
d1=round(d1,digits = 2)
d1=replace(d1, d1<=0, 0)
NHSBoards_tidy <- tidy(NHSBoards)
NHSBoards$id <- row.names(NHSBoards)
NHSBoards_tidy <- left_join(NHSBoards_tidy, NHSBoards@data)
dr=as.data.frame(NHSBoards@data)
hospitalsSco <- data.frame(NAME_2  = sort(dr$NAME_2),
score = as.numeric(d1))
NHSBoards_tidy <- left_join(NHSBoards_tidy, hospitalsSco)
HBLabel <- NHSBoards_tidy %>%
group_by(NAME_2) %>%
summarise(label_long = mean(range(long)), label_lat = mean(range(lat)), score = mean(score))
map <- ggplot(NHSBoards_tidy, aes(x = long, y = lat, group = group, fill = score)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_void() +
theme(legend.position = "none")+
labs(title = model) +
theme(plot.title = element_text(margin = margin(t = 40, b = -40)))
map=map +geom_text(data = HBLabel, mapping = aes(x = label_long, y = label_lat, label = score, group = NA)
, cex = 4, col = "white")
return(map)
}
setwd(basepath)
RidgeCV=score('RidgeCV')
Lasso=score('Lasso')
RandomForest=score('RandomForest')
DecisionTree=score('DecisionTree')
png("map.png")
map=plot_grid(RidgeCV,  RandomForest,
label_size = 11)
dev.off()
x11();map
getwd()
png("map.png")
map=plot_grid(RidgeCV,  RandomForest,
label_size = 11)
x11();map
dev.off()
x11();map
#model='RidgeCV'
score=function(model){
d1=binary_precip[binary_precip$model==model,c('score_test')]
d1=t(d1)
d1=round(d1,digits = 2)
d1=replace(d1, d1<=0, 0)
NHSBoards_tidy <- tidy(NHSBoards)
NHSBoards$id <- row.names(NHSBoards)
NHSBoards_tidy <- left_join(NHSBoards_tidy, NHSBoards@data)
dr=as.data.frame(NHSBoards@data)
hospitalsSco <- data.frame(NAME_2  = sort(dr$NAME_2),
score = as.numeric(d1))
NHSBoards_tidy <- left_join(NHSBoards_tidy, hospitalsSco)
HBLabel <- NHSBoards_tidy %>%
group_by(NAME_2) %>%
summarise(label_long = mean(range(long)), label_lat = mean(range(lat)), score = mean(score))
map <- ggplot(NHSBoards_tidy, aes(x = long, y = lat, group = group, fill = score)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_void() +
theme(legend.position = "none")+
labs(title = model) +
theme(plot.title = element_text(margin = margin(t = 40, b = -40)))
map=map +geom_text(data = HBLabel, mapping = aes(x = label_long, y = label_lat,  group = NA)
, cex = 4, col = "white")
return(map)
}
setwd(basepath)
RidgeCV=score('RidgeCV')
Lasso=score('Lasso')
RandomForest=score('RandomForest')
DecisionTree=score('DecisionTree')
png("map.png")
map=plot_grid(RidgeCV,  RandomForest,
label_size = 11)
x11();map
map=map +geom_text(data = HBLabel, mapping = aes(x = label_long, y = label_lat, label = score, group = NA)
, cex = 1, col = "white")
return(map)
#model='RidgeCV'
score=function(model){
d1=binary_precip[binary_precip$model==model,c('score_test')]
d1=t(d1)
d1=round(d1,digits = 2)
d1=replace(d1, d1<=0, 0)
NHSBoards_tidy <- tidy(NHSBoards)
NHSBoards$id <- row.names(NHSBoards)
NHSBoards_tidy <- left_join(NHSBoards_tidy, NHSBoards@data)
dr=as.data.frame(NHSBoards@data)
hospitalsSco <- data.frame(NAME_2  = sort(dr$NAME_2),
score = as.numeric(d1))
NHSBoards_tidy <- left_join(NHSBoards_tidy, hospitalsSco)
HBLabel <- NHSBoards_tidy %>%
group_by(NAME_2) %>%
summarise(label_long = mean(range(long)), label_lat = mean(range(lat)), score = mean(score))
map <- ggplot(NHSBoards_tidy, aes(x = long, y = lat, group = group, fill = score)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_void() +
theme(legend.position = "none")+
labs(title = model) +
theme(plot.title = element_text(margin = margin(t = 40, b = -40)))
map=map +geom_text(data = HBLabel, mapping = aes(x = label_long, y = label_lat, label = score, group = NA)
, cex = 1, col = "white")
return(map)
}
setwd(basepath)
RidgeCV=score('RidgeCV')
Lasso=score('Lasso')
RandomForest=score('RandomForest')
DecisionTree=score('DecisionTree')
png("map.png")
map=plot_grid(RidgeCV,  RandomForest,
label_size = 11)
x11();map
#model='RidgeCV'
score=function(model){
d1=binary_precip[binary_precip$model==model,c('score_test')]
d1=t(d1)
d1=round(d1,digits = 2)
d1=replace(d1, d1<=0, 0)
NHSBoards_tidy <- tidy(NHSBoards)
NHSBoards$id <- row.names(NHSBoards)
NHSBoards_tidy <- left_join(NHSBoards_tidy, NHSBoards@data)
dr=as.data.frame(NHSBoards@data)
hospitalsSco <- data.frame(NAME_2  = sort(dr$NAME_2),
score = as.numeric(d1))
NHSBoards_tidy <- left_join(NHSBoards_tidy, hospitalsSco)
HBLabel <- NHSBoards_tidy %>%
group_by(NAME_2) %>%
summarise(label_long = mean(range(long)), label_lat = mean(range(lat)), score = mean(score))
map <- ggplot(NHSBoards_tidy, aes(x = long, y = lat, group = group, fill = score)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_void() +
theme(legend.position = "none")+
labs(title = model) +
theme(plot.title = element_text(margin = margin(t = 40, b = -40)))
map=map +geom_text(data = HBLabel, mapping = aes(x = label_long, y = label_lat, label = score, group = NA)
, cex = 0, col = "white")
return(map)
}
setwd(basepath)
RidgeCV=score('RidgeCV')
Lasso=score('Lasso')
RandomForest=score('RandomForest')
DecisionTree=score('DecisionTree')
png("map.png")
map=plot_grid(RidgeCV,  RandomForest,
label_size = 11)
x11();map
#model='RidgeCV'
score=function(model){
d1=binary_precip[binary_precip$model==model,c('score_test')]
d1=t(d1)
d1=round(d1,digits = 2)
d1=replace(d1, d1<=0, 0)
NHSBoards_tidy <- tidy(NHSBoards)
NHSBoards$id <- row.names(NHSBoards)
NHSBoards_tidy <- left_join(NHSBoards_tidy, NHSBoards@data)
dr=as.data.frame(NHSBoards@data)
hospitalsSco <- data.frame(NAME_2  = sort(dr$NAME_2),
score = as.numeric(d1))
NHSBoards_tidy <- left_join(NHSBoards_tidy, hospitalsSco)
HBLabel <- NHSBoards_tidy %>%
group_by(NAME_2) %>%
summarise(label_long = mean(range(long)), label_lat = mean(range(lat)), score = mean(score))
map <- ggplot(NHSBoards_tidy, aes(x = long, y = lat, group = group, fill = score)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_void() +
theme(legend.position = "none")+
labs(title = model) +
theme(plot.title = element_text(margin = margin(t = 40, b = -40)))
map=map +geom_text(data = HBLabel, mapping = aes(x = label_long, y = label_lat, label = score, group = NA)
,  col = "white")
return(map)
}
setwd(basepath)
RidgeCV=score('RidgeCV')
Lasso=score('Lasso')
RandomForest=score('RandomForest')
DecisionTree=score('DecisionTree')
png("map.png")
map=plot_grid(RidgeCV,  RandomForest,
label_size = 11)
x11();map
#model='RidgeCV'
score=function(model){
d1=binary_precip[binary_precip$model==model,c('score_test')]
d1=t(d1)
d1=round(d1,digits = 2)
d1=replace(d1, d1<=0, 0)
NHSBoards_tidy <- tidy(NHSBoards)
NHSBoards$id <- row.names(NHSBoards)
NHSBoards_tidy <- left_join(NHSBoards_tidy, NHSBoards@data)
dr=as.data.frame(NHSBoards@data)
hospitalsSco <- data.frame(NAME_2  = sort(dr$NAME_2),
score = as.numeric(d1))
NHSBoards_tidy <- left_join(NHSBoards_tidy, hospitalsSco)
HBLabel <- NHSBoards_tidy %>%
group_by(NAME_2) %>%
summarise(label_long = mean(range(long)), label_lat = mean(range(lat)), score = mean(score))
map <- ggplot(NHSBoards_tidy, aes(x = long, y = lat, group = group, fill = score)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_void() +
theme(legend.position = "none")+
labs(title = model) +
theme(plot.title = element_text(margin = margin(t = 40, b = -40)))
map=map +geom_text(data = HBLabel, mapping = aes(x = label_long, y = label_lat, label = score, group = NA)
, cex = 0, col = "white")
return(map)
}
setwd(basepath)
RidgeCV=score('RidgeCV')
Lasso=score('Lasso')
RandomForest=score('RandomForest')
DecisionTree=score('DecisionTree')
png("map.png")
map=plot_grid(RidgeCV,  RandomForest,
label_size = 11)
x11();map
